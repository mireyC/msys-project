// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: project_service.proto

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ProjectService_Index_FullMethodName                   = "/project.service.v1.ProjectService/Index"
	ProjectService_FindProjectByMemId_FullMethodName      = "/project.service.v1.ProjectService/FindProjectByMemId"
	ProjectService_FindProjectTemplateList_FullMethodName = "/project.service.v1.ProjectService/FindProjectTemplateList"
	ProjectService_SaveProject_FullMethodName             = "/project.service.v1.ProjectService/SaveProject"
	ProjectService_ReadProject_FullMethodName             = "/project.service.v1.ProjectService/ReadProject"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	Index(ctx context.Context, in *IndexMessage, opts ...grpc.CallOption) (*IndexResponse, error)
	FindProjectByMemId(ctx context.Context, in *ProjectRpcMessage, opts ...grpc.CallOption) (*ProjectRpcResponse, error)
	FindProjectTemplateList(ctx context.Context, in *ProjectTemplateMessage, opts ...grpc.CallOption) (*ProjectTemplateResp, error)
	SaveProject(ctx context.Context, in *ProjectSaveRpcMessage, opts ...grpc.CallOption) (*ProjectSaveRespMessage, error)
	ReadProject(ctx context.Context, in *ProjectMessage, opts ...grpc.CallOption) (*ProjectMessage, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) Index(ctx context.Context, in *IndexMessage, opts ...grpc.CallOption) (*IndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexResponse)
	err := c.cc.Invoke(ctx, ProjectService_Index_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectByMemId(ctx context.Context, in *ProjectRpcMessage, opts ...grpc.CallOption) (*ProjectRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectRpcResponse)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectByMemId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectTemplateList(ctx context.Context, in *ProjectTemplateMessage, opts ...grpc.CallOption) (*ProjectTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectTemplateResp)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectTemplateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) SaveProject(ctx context.Context, in *ProjectSaveRpcMessage, opts ...grpc.CallOption) (*ProjectSaveRespMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectSaveRespMessage)
	err := c.cc.Invoke(ctx, ProjectService_SaveProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ReadProject(ctx context.Context, in *ProjectMessage, opts ...grpc.CallOption) (*ProjectMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectMessage)
	err := c.cc.Invoke(ctx, ProjectService_ReadProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	Index(context.Context, *IndexMessage) (*IndexResponse, error)
	FindProjectByMemId(context.Context, *ProjectRpcMessage) (*ProjectRpcResponse, error)
	FindProjectTemplateList(context.Context, *ProjectTemplateMessage) (*ProjectTemplateResp, error)
	SaveProject(context.Context, *ProjectSaveRpcMessage) (*ProjectSaveRespMessage, error)
	ReadProject(context.Context, *ProjectMessage) (*ProjectMessage, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) Index(context.Context, *IndexMessage) (*IndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectByMemId(context.Context, *ProjectRpcMessage) (*ProjectRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectByMemId not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectTemplateList(context.Context, *ProjectTemplateMessage) (*ProjectTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectTemplateList not implemented")
}
func (UnimplementedProjectServiceServer) SaveProject(context.Context, *ProjectSaveRpcMessage) (*ProjectSaveRespMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProject not implemented")
}
func (UnimplementedProjectServiceServer) ReadProject(context.Context, *ProjectMessage) (*ProjectMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProject not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Index(ctx, req.(*IndexMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectByMemId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRpcMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectByMemId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectByMemId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectByMemId(ctx, req.(*ProjectRpcMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectTemplateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectTemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectTemplateList(ctx, req.(*ProjectTemplateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_SaveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSaveRpcMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).SaveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_SaveProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).SaveProject(ctx, req.(*ProjectSaveRpcMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ReadProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ReadProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ReadProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ReadProject(ctx, req.(*ProjectMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.service.v1.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _ProjectService_Index_Handler,
		},
		{
			MethodName: "FindProjectByMemId",
			Handler:    _ProjectService_FindProjectByMemId_Handler,
		},
		{
			MethodName: "FindProjectTemplateList",
			Handler:    _ProjectService_FindProjectTemplateList_Handler,
		},
		{
			MethodName: "SaveProject",
			Handler:    _ProjectService_SaveProject_Handler,
		},
		{
			MethodName: "ReadProject",
			Handler:    _ProjectService_ReadProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project_service.proto",
}
